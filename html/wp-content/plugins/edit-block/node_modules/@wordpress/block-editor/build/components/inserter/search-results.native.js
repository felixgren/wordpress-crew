"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _searchItems = require("./search-items");

var _blockTypesList = _interopRequireDefault(require("../block-types-list"));

var _noResults = _interopRequireDefault(require("./no-results"));

var _store = require("../../store");

var _useBlockTypeImpressions = _interopRequireDefault(require("./hooks/use-block-type-impressions"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const NON_BLOCK_CATEGORIES = ['reusable'];
const ALLOWED_EMBED_VARIATIONS = ['core/embed'];

function InserterSearchResults({
  filterValue,
  onSelect,
  listProps,
  rootClientId,
  isFullScreen
}) {
  const {
    blockTypes
  } = (0, _data.useSelect)(select => {
    const allItems = select(_store.store).getInserterItems(rootClientId);
    const blockItems = allItems.filter(({
      id,
      category
    }) => !NON_BLOCK_CATEGORIES.includes(category) && ( // We don't want to show all possible embed variations
    // as different blocks in the inserter. We'll only show a
    // few popular ones.
    category !== 'embed' || category === 'embed' && ALLOWED_EMBED_VARIATIONS.includes(id)));
    const filteredItems = (0, _searchItems.searchItems)(blockItems, filterValue);
    return {
      blockTypes: filteredItems
    };
  }, [rootClientId, filterValue]);
  const {
    items,
    trackBlockTypeSelected
  } = (0, _useBlockTypeImpressions.default)(blockTypes);

  if (!items || (items === null || items === void 0 ? void 0 : items.length) === 0) {
    return (0, _element.createElement)(_noResults.default, null);
  }

  const handleSelect = (...args) => {
    trackBlockTypeSelected(...args);
    onSelect(...args);
  };

  return (0, _element.createElement)(_blockTypesList.default, {
    name: "Blocks",
    initialNumToRender: isFullScreen ? 10 : 3,
    items,
    onSelect: handleSelect,
    listProps
  });
}

var _default = InserterSearchResults;
exports.default = _default;
//# sourceMappingURL=search-results.native.js.map