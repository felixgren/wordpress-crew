"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _utils = require("./utils");

var _useSetting = _interopRequireDefault(require("../components/use-setting"));

var _components2 = require("../components");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const justifyContentMap = {
  left: 'flex-start',
  right: 'flex-end',
  center: 'center',
  'space-between': 'space-between'
};
var _default = {
  name: 'flex',
  label: (0, _i18n.__)('Flex'),
  inspectorControls: function FlexLayoutInspectorControls({
    layout = {},
    onChange
  }) {
    return (0, _element.createElement)(FlexLayoutJustifyContentControl, {
      layout: layout,
      onChange: onChange
    });
  },
  toolBarControls: function FlexLayoutToolbarControls({
    layout = {},
    onChange,
    layoutBlockSupport
  }) {
    if (layoutBlockSupport !== null && layoutBlockSupport !== void 0 && layoutBlockSupport.allowSwitching) {
      return null;
    }

    return (0, _element.createElement)(_components2.BlockControls, {
      group: "block",
      __experimentalExposeToChildren: true
    }, (0, _element.createElement)(FlexLayoutJustifyContentControl, {
      layout: layout,
      onChange: onChange,
      isToolbar: true
    }));
  },
  save: function FlexLayoutStyle({
    selector,
    layout
  }) {
    const blockGapSupport = (0, _useSetting.default)('spacing.blockGap');
    const hasBlockGapStylesSupport = blockGapSupport !== null;
    const justifyContent = justifyContentMap[layout.justifyContent] || 'flex-start';
    return (0, _element.createElement)("style", null, `
				${(0, _utils.appendSelectors)(selector)} {
					display: flex;
					gap: ${hasBlockGapStylesSupport ? 'var( --wp--style--block-gap, 0.5em )' : '0.5em'};
					flex-wrap: wrap;
					align-items: center;
					flex-direction: row;
					justify-content: ${justifyContent};
				}

				${(0, _utils.appendSelectors)(selector, '> *')} {
					margin: 0;
				}
			`);
  },

  getOrientation() {
    return 'horizontal';
  },

  getAlignments() {
    return [];
  }

};
exports.default = _default;

function FlexLayoutJustifyContentControl({
  layout,
  onChange,
  isToolbar = false
}) {
  const {
    justifyContent = 'left'
  } = layout;

  if (isToolbar) {
    return (0, _element.createElement)(_components2.JustifyContentControl, {
      allowedControls: ['left', 'center', 'right', 'space-between'],
      value: justifyContent,
      onChange: value => {
        onChange({ ...layout,
          justifyContent: value
        });
      },
      popoverProps: {
        position: 'bottom right',
        isAlternate: true
      }
    });
  }

  return (0, _element.createElement)(_components.__experimentalToggleGroupControl, {
    label: (0, _i18n.__)('Justify content'),
    value: justifyContent,
    onChange: value => {
      onChange({ ...layout,
        justifyContent: value
      });
    },
    isBlock: true
  }, (0, _element.createElement)(_components.__experimentalToggleGroupControlOption, {
    value: "left",
    label: (0, _i18n._x)('Left', 'Justify content option')
  }), (0, _element.createElement)(_components.__experimentalToggleGroupControlOption, {
    value: "center",
    label: (0, _i18n._x)('Center', 'Justify content option')
  }), (0, _element.createElement)(_components.__experimentalToggleGroupControlOption, {
    value: "right",
    label: (0, _i18n._x)('Right', 'Justify content option')
  }), (0, _element.createElement)(_components.__experimentalToggleGroupControlOption, {
    value: "space-between",
    label: (0, _i18n._x)('Space between', 'Justify content option')
  }));
}
//# sourceMappingURL=flex.js.map